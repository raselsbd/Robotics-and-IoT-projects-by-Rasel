#include <QTRSensors.h>
QTRSensors qtr;

const uint8_t SensorCount = 8;
uint16_t   sensorValues[SensorCount];

void setup()
{
  // configure the sensors
   qtr.setTypeRC();
   qtr.setSensorPins((const uint8_t[]){A0,A1,.A2,A3,A4,A5,A6,A7}, SensorCount);
   qtr.setEmitterPin(13);

  delay(500);
  pinMode(LED_BUILTIN,   OUTPUT);
  digitalWrite(LED_BUILTIN, HIGH); // turn on Arduino's LED to indicate   we are in calibration mode

  // 2.5 ms RC read timeout (default) * 10 reads   per calibrate() call
  // = ~25 ms per calibrate() call.
  // Call calibrate()   400 times to make calibration take about 10 seconds.
  for (uint16_t i = 0; i   < 400; i++)
  {
    qtr.calibrate();
  }
  digitalWrite(LED_BUILTIN,   LOW); // turn off Arduino's LED to indicate we are through with calibration

   // print the calibration minimum values measured when emitters were on
  Serial.begin(9600);
   for (uint8_t i = 0; i < SensorCount; i++)
  {
    Serial.print(qtr.calibrationOn.minimum[i]);
     Serial.print(' ');
  }
  Serial.println();

  // print the calibration   maximum values measured when emitters were on
  for (uint8_t i = 0; i < SensorCount;   i++)
  {
    Serial.print(qtr.calibrationOn.maximum[i]);
    Serial.print('   ');
  }
  Serial.println();
  Serial.println();
  delay(1000);
}

void   loop()
{
  // read calibrated sensor values and obtain a measure of the line   position
  // from 0 to 5000 (for a white line, use readLineWhite() instead)
   uint16_t position = qtr.readLineBlack(sensorValues);

  // print the sensor   values as numbers from 0 to 1000, where 0 means maximum
  // reflectance and   1000 means minimum reflectance, followed by the line
  // position
  for (uint8_t   i = 0; i < SensorCount; i++)
  {
    Serial.print(sensorValues[i]);
    Serial.print('\  ');
   }
  Serial.println(position);

  delay(250);
}